<?xml version="1.0" encoding="UTF-8"?>
<CATS version="1.11">
<Problem title="Аллокатор для связного списка" lang="ru" tlimit="1" mlimit="4000"
  author="" inputFile="*STDIN" outputFile="*STDOUT"
  saveInputPrefix="50B" saveOutputPrefix="50B" saveAnswerPrefix="50B">


<ProblemStatement>
  <p>Аллокатор -- это класс, который инкапсулирует управление памятью.
  </p>
  <p>
      Известная проблема аллокации для связных списков состоит в том, что
      при интенсивных операциях вставки и удаления может возникнуть эффект 
      фрагментации системной памяти. Чтобы снизить влияние этого эффекта, предлагается
      запрашивать у операционной системы память на группу объектов и оперировать
      полученным буфером, что также снижает количество системных вызовов.
  </p>
  <p>
    Необходимо реализовать класс FixedAllocator, который будет использовать
    необходимое количество непрерывных буферов как пул памяти для элементов списка. 
    Размер страницы (размер одного непрерывного буфера), как и размер объектов, передается аллокатору как параметр
    конструктора.
  </p>
  <p>
      Определение класса должно содержать следующие методы:
  </p>
  <p>
      <code>FixedAllocator(size_t chunk_size, size_t page_size)</code> -- конструктор, принимающий размер страницы памяти и размер одного объекта;
  </p>
  <p>
      <code>void* Allocate()</code> -- возвращает указатель на свободный участок
      памяти для одного элемента размера chunk_size;
  </p>
  <p>
      <code>void Deallocate(void*)</code> -- возвращает в пул память, занимаемую элементом.
  </p>
  <p>
      Список использует метод <code>Allocate</code>, когда необходимо получить
      память для одного элемента, и <code>Deallocate</code>, когда память нужно
      освободить.
  </p>
</ProblemStatement>

<Linter name="cpplint" stage="before" src="cpplint.py"/>

<Import type="checker" guid="std.nums"/>

<Module type="solution" src="main.cpp" main="fixed_allocator.h" de_code="107"></Module>

<Test rank="1"><In>0</In><Out>1</Out></Test>

</Problem>
</CATS>
